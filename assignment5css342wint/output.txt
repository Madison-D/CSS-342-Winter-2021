Sun Mar 14 23:00:21 PDT 2021
Linux csslab7.uwb.edu 3.10.0-1160.11.1.el7.x86_64 #1 SMP Fri Dec 18 16:34:56 UTC 2020 x86_64 x86_64 x86_64 GNU/Linux
uid=1062590(mdienh) gid=2121062590(mdienh) groups=2121062590(mdienh),605559(lab-access)
=====================================================
ERROR ERROR ERROR ERROR ERROR ERROR ERROR ERROR ERROR 
clang-tidy NOT found in path (but is in /opt/rh/llvm-toolset-7.0/root/bin/clang-tidy )
Add the following command to ~/.bashrc file
     source scl_source enable llvm-toolset-7.0
You can add the command by executing the following line
     echo "source scl_source enable llvm-toolset-7.0" >> ~/.bashrc
=====================================================
=====================================================
1. Compiles without warnings with -Wall -Wextra flags
=====================================================
=====================================================
2. Runs and produces correct output
=====================================================
isEmpty: True
isEmpty: False
10 
5 10 
5 10 15 
5 7 10 15 
5 6 7 10 15 
5 6 7 9 10 15 
5 6 7 8 9 10 15 
3 5 6 7 8 9 10 15 
1 3 5 6 7 8 9 10 15 
1 2 3 5 6 7 8 9 10 15 
1 2 3 4 5 6 7 8 9 10 15 
1 2 3 4 5 6 7 8 9 10 15 17 
1 2 3 4 5 6 7 8 9 10 15 16 17 
1 2 3 4 5 6 7 8 9 10 15 16 17 19 
1 2 3 4 5 6 7 8 9 10 15 16 17 18 19 
1 2 3 4 5 6 7 8 9 10 13 15 16 17 18 19 
1 2 3 4 5 6 7 8 9 10 11 13 15 16 17 18 19 
1 2 3 4 5 6 7 8 9 10 11 12 13 15 16 17 18 19 
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 
Height: 4
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 19 
1 2 3 4 5 6 7 8 9 10 12 13 14 15 16 17 19 
1 2 3 4 5 6 7 8 9 12 13 14 15 16 17 19 
1 2 3 4 6 7 8 9 12 13 14 15 16 17 19 
Entry: 2
Contains 2? True
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 
1 3 5 7 9 11 13 15 17 19 
=====================================================
3. clang-tidy warnings are fixed
=====================================================
WARNING: clang-tidy not available.
=====================================================
4. clang-format does not find any formatting issues
=====================================================
Running clang-format on ./binarytreeinterface.cpp
24,33c24,32
< Node::Node(int data)
< {
< 	this->data = data;
< 	right = nullptr;
< 	left = nullptr;
< 
< 	//right thread
< 	hasRightChild = false;
< 	//left thread
< 	hasLeftChild = false;
---
> Node::Node(int data) {
>   this->data = data;
>   right = nullptr;
>   left = nullptr;
> 
>   // right thread
>   hasRightChild = false;
>   // left thread
>   hasLeftChild = false;
46,52c45,46
< BinaryTreeInterface::BinaryTreeInterface(int n)
< {
< 	vector<int> vector;
< 
< 	for (int i = 1; i <= n; i++) {
< 		vector.push_back(i);
< 	}
---
> BinaryTreeInterface::BinaryTreeInterface(int n) {
>   vector<int> vector;
54c48,52
< 	add(vector);
---
>   for (int i = 1; i <= n; i++) {
>     vector.push_back(i);
>   }
> 
>   add(vector);
61,64c59
< BinaryTreeInterface::~BinaryTreeInterface()
< {
< 	clear(root);
< }
---
> BinaryTreeInterface::~BinaryTreeInterface() { clear(root); }
70,72c65,66
< BinaryTreeInterface::BinaryTreeInterface(BinaryTreeInterface& source)
< {
< 	add(source.convertToVector());
---
> BinaryTreeInterface::BinaryTreeInterface(BinaryTreeInterface &source) {
>   add(source.convertToVector());
80,81c74,75
< 	vector<int> emptyVector;
< 	return convertToVector(emptyVector, root);
---
>   vector<int> emptyVector;
>   return convertToVector(emptyVector, root);
89,97c83,93
< 	Node* currNode)
< {
< 	// first recur on left child
< 	if (currNode->hasLeftChild)
< 		vector = convertToVector(vector, currNode->left);
< 
< 	// then add the data of node to the vector
< 	vector.push_back(currNode->data);
< 
---
>                                                  Node *currNode) {
>   // first recur on left child
>   if (currNode->hasLeftChild)
>     vector = convertToVector(vector, currNode->left);
> 
>   // then add the data of node to the vector
>   vector.push_back(currNode->data);
> 
>   // now recur on right child
>   if (currNode->hasRightChild)
>     vector = convertToVector(vector, currNode->right);
99,103c95
< 	// now recur on right child
< 	if (currNode->hasRightChild)
< 		vector = convertToVector(vector, currNode->right);
< 
< 	return vector;
---
>   return vector;
110,113c102
< bool BinaryTreeInterface::isEmpty() const
< {
< 	return (root == nullptr);
< }
---
> bool BinaryTreeInterface::isEmpty() const { return (root == nullptr); }
120,126c109,114
< int BinaryTreeInterface::getHeight() const
< {
< 	if (root == nullptr)
< 		return 0;
< 	else {
< 		return (getHeight(root));
< 	}
---
> int BinaryTreeInterface::getHeight() const {
>   if (root == nullptr)
>     return 0;
>   else {
>     return (getHeight(root));
>   }
133,136c121,123
< int BinaryTreeInterface::getHeight(Node* currNode) const
< {
< 	int leftHeight = 0;
< 	int rightHeight = 0;
---
> int BinaryTreeInterface::getHeight(Node *currNode) const {
>   int leftHeight = 0;
>   int rightHeight = 0;
138,139c125,126
< 	if (currNode->hasLeftChild)
< 		leftHeight = 1 + getHeight(currNode->left);
---
>   if (currNode->hasLeftChild)
>     leftHeight = 1 + getHeight(currNode->left);
141,142c128,129
< 	if (currNode->hasRightChild)
< 		rightHeight = 1 + getHeight(currNode->right);
---
>   if (currNode->hasRightChild)
>     rightHeight = 1 + getHeight(currNode->right);
144c131
< 	return max(leftHeight, rightHeight);
---
>   return max(leftHeight, rightHeight);
152,153c139,140
< 	bool isInOrder = true;
< 	int previousNumber = 0;
---
>   bool isInOrder = true;
>   int previousNumber = 0;
155,174c142,160
< 	// see if vector is in order
< 	for (int data : vector) {
< 		if (previousNumber < data) {
< 			previousNumber = data;
< 		}
< 		else {
< 			isInOrder = false;
< 			break;
< 		}
< 	}
< 
< 	// if not in order, assume it is in pre-order and add all nodes
< 	// see if vector is in order
< 	if (!isInOrder) {
< 		bool addedAll = true;
< 
< 		for (int data : vector) {
< 			if (!add(data))
< 				addedAll = false;
< 		}
---
>   // see if vector is in order
>   for (int data : vector) {
>     if (previousNumber < data) {
>       previousNumber = data;
>     } else {
>       isInOrder = false;
>       break;
>     }
>   }
> 
>   // if not in order, assume it is in pre-order and add all nodes
>   // see if vector is in order
>   if (!isInOrder) {
>     bool addedAll = true;
> 
>     for (int data : vector) {
>       if (!add(data))
>         addedAll = false;
>     }
176,177c162,163
< 		return addedAll;
< 	}
---
>     return addedAll;
>   }
179,180c165,166
< 	// if it is in order, then find each midpoint and add
< 	return addByMidpoint(vector, 0, vector.size() - 1);
---
>   // if it is in order, then find each midpoint and add
>   return addByMidpoint(vector, 0, vector.size() - 1);
190,192c176,177
< 	int lastIndex)
< {
< 	bool added = true;
---
>                                         int lastIndex) {
>   bool added = true;
194,195c179,180
< 	if (firstIndex > lastIndex)
< 		return true;
---
>   if (firstIndex > lastIndex)
>     return true;
197c182
< 	int intGetMidPointIndex = floor((firstIndex + lastIndex) / 2);
---
>   int intGetMidPointIndex = floor((firstIndex + lastIndex) / 2);
199c184
< 	added = add(vector[intGetMidPointIndex]);
---
>   added = add(vector[intGetMidPointIndex]);
201c186
< 	Node* addedNode = getEntry(vector[intGetMidPointIndex]);
---
>   Node *addedNode = getEntry(vector[intGetMidPointIndex]);
203,204c188,189
< 	if (root == nullptr)
< 		root = addedNode;
---
>   if (root == nullptr)
>     root = addedNode;
206,207c191,192
< 	if (!addByMidpoint(vector, firstIndex, intGetMidPointIndex - 1))
< 		added = false;
---
>   if (!addByMidpoint(vector, firstIndex, intGetMidPointIndex - 1))
>     added = false;
209,210c194,195
< 	if (!addByMidpoint(vector, intGetMidPointIndex + 1, lastIndex))
< 		added = false;
---
>   if (!addByMidpoint(vector, intGetMidPointIndex + 1, lastIndex))
>     added = false;
212c197
< 	return added;
---
>   return added;
220,226c205,209
< bool BinaryTreeInterface::add(const int newData)
< {
< 	if (root == nullptr)
< 	{
< 		root = new Node(newData);
< 		root->hasLeftChild = false;
< 		root->hasRightChild = false;
---
> bool BinaryTreeInterface::add(const int newData) {
>   if (root == nullptr) {
>     root = new Node(newData);
>     root->hasLeftChild = false;
>     root->hasRightChild = false;
228,229c211,212
< 		return true;
< 	}
---
>     return true;
>   }
231c214
< 	return add(root, newData, nullptr, nullptr);
---
>   return add(root, newData, nullptr, nullptr);
239,281c222,260
< bool BinaryTreeInterface::add(Node* currNode, const int newData,
< 	Node* leftThread, Node* rightThread)
< {
< 	if (currNode->data < newData) {// less than the newNode lowest
< 		if (leftThread == nullptr
< 			|| currNode->data > leftThread->data) // more than the next lowest
< 			leftThread = currNode;
< 	}
< 
< 	else if (currNode->data > newData) {
< 		if (rightThread == nullptr
< 			|| currNode->data < rightThread->data)
< 			rightThread = currNode;
< 	}
< 
< 	// should I go right?
< 	if (currNode->data < newData) {
< 		// Yes I should go right
< 
< 		// Can I go right?
< 		if (currNode->hasRightChild) {
< 			return add(currNode->right, newData, leftThread, rightThread);
< 		}
< 
< 		Node* newNode = new Node(newData);
< 
< 		currNode->right = newNode;
< 		currNode->hasRightChild = true;
< 
< 		addThreads(newNode, leftThread, rightThread);
< 
< 		return true;
< 	}
< 	// I can't go right, should I go left?
< 	else if (currNode->data > newData) {
< 		if (currNode->hasLeftChild) {
< 			return add(currNode->left, newData, leftThread, rightThread);
< 		}
< 
< 		Node* newNode = new Node(newData);
< 
< 		currNode->left = newNode;
< 		currNode->hasLeftChild = true;
---
> bool BinaryTreeInterface::add(Node *currNode, const int newData,
>                               Node *leftThread, Node *rightThread) {
>   if (currNode->data < newData) { // less than the newNode lowest
>     if (leftThread == nullptr ||
>         currNode->data > leftThread->data) // more than the next lowest
>       leftThread = currNode;
>   } else if (currNode->data > newData) {
>     if (rightThread == nullptr || currNode->data < rightThread->data)
>       rightThread = currNode;
>   }
> 
>   // should I go right?
>   if (currNode->data < newData) {
>     // Yes I should go right
> 
>     // Can I go right?
>     if (currNode->hasRightChild) {
>       return add(currNode->right, newData, leftThread, rightThread);
>     }
> 
>     Node *newNode = new Node(newData);
> 
>     currNode->right = newNode;
>     currNode->hasRightChild = true;
> 
>     addThreads(newNode, leftThread, rightThread);
> 
>     return true;
>   }
>   // I can't go right, should I go left?
>   else if (currNode->data > newData) {
>     if (currNode->hasLeftChild) {
>       return add(currNode->left, newData, leftThread, rightThread);
>     }
> 
>     Node *newNode = new Node(newData);
> 
>     currNode->left = newNode;
>     currNode->hasLeftChild = true;
283c262
< 		addThreads(newNode, leftThread, rightThread);
---
>     addThreads(newNode, leftThread, rightThread);
285,286c264,265
< 		return true;
< 	}
---
>     return true;
>   }
288c267
< 	return false;
---
>   return false;
293c272
< 	threads
---
>         threads
296,302c275,280
< void BinaryTreeInterface::addThreads(Node* addedNode, Node* leftThread,
< 	Node* rightThread)
< {
< 	addedNode->left = leftThread;
< 	addedNode->right = rightThread;
< 	addedNode->hasLeftChild = false;
< 	addedNode->hasRightChild = false;
---
> void BinaryTreeInterface::addThreads(Node *addedNode, Node *leftThread,
>                                      Node *rightThread) {
>   addedNode->left = leftThread;
>   addedNode->right = rightThread;
>   addedNode->hasLeftChild = false;
>   addedNode->hasRightChild = false;
310,324c288,301
< bool BinaryTreeInterface::remove(const int target)
< {
< 	if (root == nullptr)
< 		return false;
< 
< 	if (root->data == target) {
< 		if (!root->hasLeftChild && !root->hasRightChild) {
< 			delete root;
< 			root = nullptr;
< 			return true;
< 		}
< 
< 		Node* saveRoot = root;
< 		prepareRemoval(root, root);
< 		delete saveRoot;
---
> bool BinaryTreeInterface::remove(const int target) {
>   if (root == nullptr)
>     return false;
> 
>   if (root->data == target) {
>     if (!root->hasLeftChild && !root->hasRightChild) {
>       delete root;
>       root = nullptr;
>       return true;
>     }
> 
>     Node *saveRoot = root;
>     prepareRemoval(root, root);
>     delete saveRoot;
326,327c303,304
< 		return true;
< 	}
---
>     return true;
>   }
329,330c306,307
< 	if (target < root->data)
< 		return remove(root, root->left, target);
---
>   if (target < root->data)
>     return remove(root, root->left, target);
332c309
< 	return remove(root, root->right, target);
---
>   return remove(root, root->right, target);
339,359c316,334
< bool BinaryTreeInterface::remove(Node* parentNode, Node* currNode,
< 	const int target)
< {
< 	// if bst is empty, then the item is not found
< 	if (currNode == nullptr) {
< 		//the item is not found
< 		return false;
< 	}
< 	// if the target is equal to data in tree, item is found
< 	else if (target == currNode->data) {
< 		prepareRemoval(parentNode, currNode);
< 		delete currNode;
< 		return true;
< 	}
< 	// checks left / right continues to search through, contains
< 	else if (target < currNode->data) {
< 		return remove(currNode, currNode->left, target);
< 	}
< 	else {
< 		return remove(currNode, currNode->right, target);
< 	}
---
> bool BinaryTreeInterface::remove(Node *parentNode, Node *currNode,
>                                  const int target) {
>   // if bst is empty, then the item is not found
>   if (currNode == nullptr) {
>     // the item is not found
>     return false;
>   }
>   // if the target is equal to data in tree, item is found
>   else if (target == currNode->data) {
>     prepareRemoval(parentNode, currNode);
>     delete currNode;
>     return true;
>   }
>   // checks left / right continues to search through, contains
>   else if (target < currNode->data) {
>     return remove(currNode, currNode->left, target);
>   } else {
>     return remove(currNode, currNode->right, target);
>   }
366,469c341,439
< void BinaryTreeInterface::prepareRemoval(Node* parentOfRemoveNode,
< 	Node* removeNode)
< {
< 	Node* parentNodeOfReplacement;
< 	Node* replacementNode;
< 
< 	bool isRoot = parentOfRemoveNode == removeNode;
< 	bool isLeftNode = parentOfRemoveNode->left == removeNode;
< 	bool isLeaf = ((!removeNode->hasLeftChild)
< 		&& (!removeNode->hasRightChild));
< 
< 	// if the node being removed is a leaf node
< 	// does not need a node to replace it
< 	if (isLeaf) {
< 		if (isLeftNode) {
< 			parentOfRemoveNode->left = removeNode->left;
< 			parentOfRemoveNode->hasLeftChild = false;
< 			return;
< 		}
< 
< 		parentOfRemoveNode->right = removeNode->right;
< 		parentOfRemoveNode->hasRightChild = false;
< 
< 		return;
< 	}
< 
< 	// if it does need a node to replace it:
< 
< 	// if left node doesn't exist
< 	if (!removeNode->hasLeftChild)
< 	{
< 		if (isRoot)
< 			root = removeNode->right;
< 		else if (isLeftNode)
< 			parentOfRemoveNode->left = removeNode->right;
< 		else
< 			parentOfRemoveNode->right = removeNode->right;
< 
< 		// if the node to the right of the node being removed has a left 
< 		//thread, change its thread to the parent node
< 		if (!removeNode->right->hasLeftChild)
< 			removeNode->right->left = parentOfRemoveNode;
< 
< 		return;
< 	}
< 
< 	// set replacementNode to left
< 	replacementNode = removeNode->left;
< 
< 	// if the left node doesn't have a right node, the left node is the 
< 	//replacement
< 	if (!replacementNode->hasRightChild)
< 	{
< 		if (isRoot)
< 			root = removeNode->left;
< 		else if (isLeftNode)
< 			parentOfRemoveNode->left = removeNode->left;
< 		else
< 			parentOfRemoveNode->right = removeNode->left;
< 
< 		replacementNode->right = removeNode->right;
< 		replacementNode->hasRightChild = true;
< 
< 		return;
< 	}
< 
< 	// if the left node  of the node being removed isn't the replacement
< 	//node, store the parent of the replacement
< 	parentNodeOfReplacement = replacementNode;
< 
< 	// keep going right until you hit one from the end of the tree
< 	while (parentNodeOfReplacement->right->hasRightChild)
< 	{
< 		parentNodeOfReplacement = parentNodeOfReplacement->right;
< 	}
< 
< 	// store the replacement node
< 	replacementNode = parentNodeOfReplacement->right;
< 
< 	// if the replacement node has a left node,
< 	//  set the right of the parent node to the 
< 	//  left of the replacement node
< 	if (replacementNode->hasLeftChild)
< 		parentNodeOfReplacement->right = replacementNode->left;
< 
< 	// otherwise, set the right to a thread, but keep the right node
< 	else
< 		parentNodeOfReplacement->hasRightChild = false;
< 
< 	// set replacement node's edges to the edges of the node about to be
< 	//removed
< 	replacementNode->left = removeNode->left;
< 	replacementNode->right = removeNode->right;
< 	replacementNode->hasLeftChild = removeNode->hasLeftChild;
< 	replacementNode->hasRightChild = removeNode->hasRightChild;
< 
< 	// if the removed node is the left or right of its parent,
< 	//  set the parent node's left/right to the replacement
< 	if (isRoot)
< 		root = replacementNode;
< 	else if (isLeftNode)
< 		parentOfRemoveNode->left = replacementNode;
< 	else
< 		parentOfRemoveNode->right = replacementNode;
---
> void BinaryTreeInterface::prepareRemoval(Node *parentOfRemoveNode,
>                                          Node *removeNode) {
>   Node *parentNodeOfReplacement;
>   Node *replacementNode;
> 
>   bool isRoot = parentOfRemoveNode == removeNode;
>   bool isLeftNode = parentOfRemoveNode->left == removeNode;
>   bool isLeaf = ((!removeNode->hasLeftChild) && (!removeNode->hasRightChild));
> 
>   // if the node being removed is a leaf node
>   // does not need a node to replace it
>   if (isLeaf) {
>     if (isLeftNode) {
>       parentOfRemoveNode->left = removeNode->left;
>       parentOfRemoveNode->hasLeftChild = false;
>       return;
>     }
> 
>     parentOfRemoveNode->right = removeNode->right;
>     parentOfRemoveNode->hasRightChild = false;
> 
>     return;
>   }
> 
>   // if it does need a node to replace it:
> 
>   // if left node doesn't exist
>   if (!removeNode->hasLeftChild) {
>     if (isRoot)
>       root = removeNode->right;
>     else if (isLeftNode)
>       parentOfRemoveNode->left = removeNode->right;
>     else
>       parentOfRemoveNode->right = removeNode->right;
> 
>     // if the node to the right of the node being removed has a left
>     // thread, change its thread to the parent node
>     if (!removeNode->right->hasLeftChild)
>       removeNode->right->left = parentOfRemoveNode;
> 
>     return;
>   }
> 
>   // set replacementNode to left
>   replacementNode = removeNode->left;
> 
>   // if the left node doesn't have a right node, the left node is the
>   // replacement
>   if (!replacementNode->hasRightChild) {
>     if (isRoot)
>       root = removeNode->left;
>     else if (isLeftNode)
>       parentOfRemoveNode->left = removeNode->left;
>     else
>       parentOfRemoveNode->right = removeNode->left;
> 
>     replacementNode->right = removeNode->right;
>     replacementNode->hasRightChild = true;
> 
>     return;
>   }
> 
>   // if the left node  of the node being removed isn't the replacement
>   // node, store the parent of the replacement
>   parentNodeOfReplacement = replacementNode;
> 
>   // keep going right until you hit one from the end of the tree
>   while (parentNodeOfReplacement->right->hasRightChild) {
>     parentNodeOfReplacement = parentNodeOfReplacement->right;
>   }
> 
>   // store the replacement node
>   replacementNode = parentNodeOfReplacement->right;
> 
>   // if the replacement node has a left node,
>   //  set the right of the parent node to the
>   //  left of the replacement node
>   if (replacementNode->hasLeftChild)
>     parentNodeOfReplacement->right = replacementNode->left;
> 
>   // otherwise, set the right to a thread, but keep the right node
>   else
>     parentNodeOfReplacement->hasRightChild = false;
> 
>   // set replacement node's edges to the edges of the node about to be
>   // removed
>   replacementNode->left = removeNode->left;
>   replacementNode->right = removeNode->right;
>   replacementNode->hasLeftChild = removeNode->hasLeftChild;
>   replacementNode->hasRightChild = removeNode->hasRightChild;
> 
>   // if the removed node is the left or right of its parent,
>   //  set the parent node's left/right to the replacement
>   if (isRoot)
>     root = replacementNode;
>   else if (isLeftNode)
>     parentOfRemoveNode->left = replacementNode;
>   else
>     parentOfRemoveNode->right = replacementNode;
476,489c446,455
< void BinaryTreeInterface::clear(Node* currNode)
< {
< 	if (currNode == nullptr)
< 	{
< 		return;
< 	}
< 	if (currNode->hasLeftChild)
< 	{
< 		clear(currNode->left);
< 	}
< 	if (currNode->hasRightChild)
< 	{
< 		clear(currNode->right);
< 	}
---
> void BinaryTreeInterface::clear(Node *currNode) {
>   if (currNode == nullptr) {
>     return;
>   }
>   if (currNode->hasLeftChild) {
>     clear(currNode->left);
>   }
>   if (currNode->hasRightChild) {
>     clear(currNode->right);
>   }
491,492c457,458
< 	delete currNode;
< 	//root = nullptr;
---
>   delete currNode;
>   // root = nullptr;
499,501c465,466
< Node* BinaryTreeInterface::getEntry(const int target) const
< {
< 	return getEntry(root, target);
---
> Node *BinaryTreeInterface::getEntry(const int target) const {
>   return getEntry(root, target);
508,526c473,490
< Node* BinaryTreeInterface::getEntry(Node* currNode, const int target) const
< {
< 	// if the target is equal to data in tree, item is found
< 	if (target == currNode->data) {
< 		//the item is found
< 		return currNode;
< 	}
< 	// checks left continues to search through, contains
< 	else if (target < currNode->data) {
< 		if (currNode->hasLeftChild)
< 			return getEntry(currNode->left, target);
< 		return nullptr;
< 	}
< 	// checks right continues to search through, contains
< 	else {
< 		if (currNode->hasRightChild)
< 			return getEntry(currNode->right, target);
< 		return nullptr;
< 	}
---
> Node *BinaryTreeInterface::getEntry(Node *currNode, const int target) const {
>   // if the target is equal to data in tree, item is found
>   if (target == currNode->data) {
>     // the item is found
>     return currNode;
>   }
>   // checks left continues to search through, contains
>   else if (target < currNode->data) {
>     if (currNode->hasLeftChild)
>       return getEntry(currNode->left, target);
>     return nullptr;
>   }
>   // checks right continues to search through, contains
>   else {
>     if (currNode->hasRightChild)
>       return getEntry(currNode->right, target);
>     return nullptr;
>   }
533,535c497,498
< bool BinaryTreeInterface::contains(const int target)
< {
< 	return (getEntry(target)->data == target);
---
> bool BinaryTreeInterface::contains(const int target) {
>   return (getEntry(target)->data == target);
542,544c505,506
< void BinaryTreeInterface::printInOrderTraversal()
< {
< 	Node* currNode = root;
---
> void BinaryTreeInterface::printInOrderTraversal() {
>   Node *currNode = root;
546,547c508,509
< 	if (currNode == nullptr)
< 		return;
---
>   if (currNode == nullptr)
>     return;
549c511
< 	Node* currNode2 = currNode;
---
>   Node *currNode2 = currNode;
551,552c513,514
< 	while (currNode2->hasLeftChild)
< 		currNode2 = currNode2->left;
---
>   while (currNode2->hasLeftChild)
>     currNode2 = currNode2->left;
554,556c516,517
< 	while (true)
< 	{
< 		cout << currNode2->data << " ";
---
>   while (true) {
>     cout << currNode2->data << " ";
558,559c519,520
< 		if (currNode2->right == nullptr)
< 			break;
---
>     if (currNode2->right == nullptr)
>       break;
561,562c522,523
< 		currNode2 = inorderFindNextNode(currNode2);
< 	}
---
>     currNode2 = inorderFindNextNode(currNode2);
>   }
564c525
< 	cout << endl;
---
>   cout << endl;
571,582c532,541
< Node* BinaryTreeInterface::inorderFindNextNode(Node* currNode)
< {
< 	//sends the next inorder node
< 	if (!currNode->hasRightChild)
< 		return currNode->right;
< 
< 	currNode = currNode->right;
< 
< 	while (currNode->hasLeftChild)
< 	{
< 		currNode = currNode->left;
< 	}
---
> Node *BinaryTreeInterface::inorderFindNextNode(Node *currNode) {
>   // sends the next inorder node
>   if (!currNode->hasRightChild)
>     return currNode->right;
> 
>   currNode = currNode->right;
> 
>   while (currNode->hasLeftChild) {
>     currNode = currNode->left;
>   }
584c543
< 	return currNode;
---
>   return currNode;
591,609c550,566
< bool BinaryTreeInterface::removeEvens()
< {
< 	bool removedAllEvens = true;
< 
< 	// get vector of all nodes
< 	vector<int> vector = convertToVector();
< 
< 	// remove every odd value from vector
< 	for (int i = 0; i < vector.size(); i++) {
< 		if (vector[i] % 2 == 1)
< 			vector.erase(vector.begin() + i);
< 	}
< 
< 	// remove all of the nodes left in the even vector
< 	for (int removeValue : vector)
< 	{
< 		if (!remove(removeValue))
< 			removedAllEvens = false;
< 	}
---
> bool BinaryTreeInterface::removeEvens() {
>   bool removedAllEvens = true;
> 
>   // get vector of all nodes
>   vector<int> vector = convertToVector();
> 
>   // remove every odd value from vector
>   for (int i = 0; i < vector.size(); i++) {
>     if (vector[i] % 2 == 1)
>       vector.erase(vector.begin() + i);
>   }
> 
>   // remove all of the nodes left in the even vector
>   for (int removeValue : vector) {
>     if (!remove(removeValue))
>       removedAllEvens = false;
>   }
611c568
< 	return removedAllEvens;
---
>   return removedAllEvens;
618,620c575
< Node* BinaryTreeInterface::getRoot() {
< 	return root;
< }
\ No newline at end of file
---
> Node *BinaryTreeInterface::getRoot() { return root; }
\ No newline at end of file
Running clang-format on ./main.cpp
17c17
<     BinaryTreeInterface t1;
---
>   BinaryTreeInterface t1;
19,79c19,79
<     // Creation of the Threaded 
<     // Binary search tree
<     cout << "isEmpty: " << (t1.isEmpty() == true ? "True" : "False") << endl;
<     t1.add(10);
<     cout << "isEmpty: " << (t1.isEmpty() == true ? "True" : "False") << endl;
<     t1.printInOrderTraversal();
<     t1.add(5);
<     t1.printInOrderTraversal();
<     t1.add(15);
<     t1.printInOrderTraversal();
<     t1.add(7);
<     t1.printInOrderTraversal();
<     t1.add(6);
<     t1.printInOrderTraversal();
<     t1.add(9);
<     t1.printInOrderTraversal();
<     t1.add(8);
<     t1.printInOrderTraversal();
<     t1.add(3);
<     t1.printInOrderTraversal();
<     t1.add(1);
<     t1.printInOrderTraversal();
<     t1.add(2);
<     t1.printInOrderTraversal();
<     t1.add(4);
<     t1.printInOrderTraversal();
<     t1.add(17);
<     t1.printInOrderTraversal();
<     t1.add(16);
<     t1.printInOrderTraversal();
<     t1.add(19);
<     t1.printInOrderTraversal();
<     t1.add(18);
<     t1.printInOrderTraversal();
<     t1.add(13);
<     t1.printInOrderTraversal();
<     t1.add(11);
<     t1.printInOrderTraversal();
<     t1.add(12);
<     t1.printInOrderTraversal();
<     t1.add(14);
<     t1.printInOrderTraversal();
<     int height = t1.getHeight();
<     cout << "Height: " << height << endl;
< 
<     // remove leaf node
<     t1.remove(18);
<     t1.printInOrderTraversal();
<     // remove node with no left node, but has a right node
<     t1.remove(11);
<     t1.printInOrderTraversal();
<     // remove root
<     t1.remove(10);
<     t1.printInOrderTraversal();
<     // remove non-root with deep subtree
<     t1.remove(5);
<     t1.printInOrderTraversal();
< 
<     Node* entry = t1.getEntry(2);
<     cout << "Entry: " << entry->data << endl;
<     cout << "Contains 2? " << (t1.contains(2) == true ? "True" : "False") << endl;
---
>   // Creation of the Threaded
>   // Binary search tree
>   cout << "isEmpty: " << (t1.isEmpty() == true ? "True" : "False") << endl;
>   t1.add(10);
>   cout << "isEmpty: " << (t1.isEmpty() == true ? "True" : "False") << endl;
>   t1.printInOrderTraversal();
>   t1.add(5);
>   t1.printInOrderTraversal();
>   t1.add(15);
>   t1.printInOrderTraversal();
>   t1.add(7);
>   t1.printInOrderTraversal();
>   t1.add(6);
>   t1.printInOrderTraversal();
>   t1.add(9);
>   t1.printInOrderTraversal();
>   t1.add(8);
>   t1.printInOrderTraversal();
>   t1.add(3);
>   t1.printInOrderTraversal();
>   t1.add(1);
>   t1.printInOrderTraversal();
>   t1.add(2);
>   t1.printInOrderTraversal();
>   t1.add(4);
>   t1.printInOrderTraversal();
>   t1.add(17);
>   t1.printInOrderTraversal();
>   t1.add(16);
>   t1.printInOrderTraversal();
>   t1.add(19);
>   t1.printInOrderTraversal();
>   t1.add(18);
>   t1.printInOrderTraversal();
>   t1.add(13);
>   t1.printInOrderTraversal();
>   t1.add(11);
>   t1.printInOrderTraversal();
>   t1.add(12);
>   t1.printInOrderTraversal();
>   t1.add(14);
>   t1.printInOrderTraversal();
>   int height = t1.getHeight();
>   cout << "Height: " << height << endl;
> 
>   // remove leaf node
>   t1.remove(18);
>   t1.printInOrderTraversal();
>   // remove node with no left node, but has a right node
>   t1.remove(11);
>   t1.printInOrderTraversal();
>   // remove root
>   t1.remove(10);
>   t1.printInOrderTraversal();
>   // remove non-root with deep subtree
>   t1.remove(5);
>   t1.printInOrderTraversal();
> 
>   Node *entry = t1.getEntry(2);
>   cout << "Entry: " << entry->data << endl;
>   cout << "Contains 2? " << (t1.contains(2) == true ? "True" : "False") << endl;
82d81
< 
86c85
<     t2.printInOrderTraversal();
---
>   t2.printInOrderTraversal();
88,90c87,89
<     BinaryTreeInterface t1 = t2;
<     t1.removeEvens();
<     t1.printInOrderTraversal();
---
>   BinaryTreeInterface t1 = t2;
>   t1.removeEvens();
>   t1.printInOrderTraversal();
93,98c92,97
< void test3(){
<     BinaryTreeInterface t3;
<     t3.add(5);
<     t3.add(7);
<     t3.add(6);
<     t3.remove(5);
---
> void test3() {
>   BinaryTreeInterface t3;
>   t3.add(5);
>   t3.add(7);
>   t3.add(6);
>   t3.remove(5);
101,105c100,103
< int main()
< {
<     test1();
<     test2();
<     test3();
---
> int main() {
>   test1();
>   test2();
>   test3();
=====================================================
5. No memory leaks using g++
=====================================================
=====================================================
6. No memory leaks using valgrind, look for "definitely lost" 
=====================================================
==26893== Memcheck, a memory error detector
==26893== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==26893== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==26893== Command: ./a.out
==26893== Parent PID: 26780
==26893== 
==26893== 
==26893== HEAP SUMMARY:
==26893==     in use at exit: 0 bytes in 0 blocks
==26893==   total heap usage: 202 allocs, 202 frees, 83,864 bytes allocated
==26893== 
==26893== All heap blocks were freed -- no leaks are possible
==26893== 
==26893== For lists of detected and suppressed errors, rerun with: -s
==26893== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
=====================================================
7. Tests have full code coverage
=====================================================
./create-output.sh: line 126: ./check-code-coverage.sh: Permission denied
Sun Mar 14 23:00:27 PDT 2021
=====================================================
To create an output.txt file with all the output from this script
Run the below command
      ./create-output.sh > output.txt 2>&1 
=====================================================
